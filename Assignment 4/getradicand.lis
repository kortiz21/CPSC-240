     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Benchmark". This program will benchmark the performance of the square root instruction in SSE and also the 
     3                                  ;square root program in the standard C library .
     4                                  ;Copyright (C) 2023 Kevin Ortiz.                                                                            *
     5                                  ;                                                                                                                           *
     6                                  ;This file is part of the software program "Benchmark".                                                                   *
     7                                  ;Benchmark is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License   *
     8                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     9                                  ;Benchmark is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied          *
    10                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
    11                                  ;A copy of the GNU General Public License v3 is available here:  <https:;www.gnu.org/licenses/>.                            *
    12                                  ;****************************************************************************************************************************
    13                                  
    14                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    15                                  ;
    16                                  ;Author information
    17                                  ;  Author name: Kevin Ortiz
    18                                  ;  Author email: keortiz@csu.fullerton.edu
    19                                  ;
    20                                  ;Program information
    21                                  ;  Program name: Benchmark
    22                                  ;  Programming languages: one modules in C and three modules in x86
    23                                  ;  Date program began: 2023 April 3
    24                                  ;  Date of last update: 2023 April 3
    25                                  ;  Comments reorganized: 2023 April 3
    26                                  ;  Files in this program:main.c, manager.asm, get_clock_freq.asm, getradicand.asm, r.sh, rg.sh
    27                                  ;  Status: Complete. Program was tested extensively with no errors.
    28                                  ;
    29                                  ;Purpose
    30                                  ;  This program will get the radicand
    31                                  ;
    32                                  ;This file
    33                                  ;   File name: getradicand.asm
    34                                  ;   Language: x86-64
    35                                  ;   Syntax: Intel
    36                                  ;   Max page width: 132 columns
    37                                  ;   Assemble: nasm -f elf64 -l getradicand.lis -o getradicand.o getradicand.asm
    38                                  ;   Optimal print specification: 132 columns width, 7 points, monospace, 8Â½x11 paper
    39                                  ;
    40                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    41                                  
    42                                  
    43                                  ;===== Begin code area ===========================================================================================================
    44                                  
    45                                  ;Declaration
    46                                  extern printf
    47                                  extern scanf
    48                                  
    49                                  global getradicand
    50                                  
    51                                  segment .data
    52 00000000 506C6561736520656E-     prompt_radicand db "Please enter a floating radicand for square root bench marking:",10,0
    52 00000009 746572206120666C6F-
    52 00000012 6174696E6720726164-
    52 0000001B 6963616E6420666F72-
    52 00000024 207371756172652072-
    52 0000002D 6F6F742062656E6368-
    52 00000036 206D61726B696E673A-
    52 0000003F 0A00               
    53 00000041 256C6600                float_form db "%lf",0
    54                                  
    55                                  segment .bss
    56                                  
    57                                  segment .text
    58                                  
    59                                  getradicand:
    60                                  
    61                                  ;backup section
    62                                  
    63                                  ;Prolog ===== Insurance for any caller of this assembly module ========================================================
    64                                  ;Any future program calling this module that the data in the caller's GPRs will not be modified.
    65 00000000 55                      push rbp
    66 00000001 4889E5                  mov  rbp,rsp
    67 00000004 57                      push rdi                                                    ;Backup rdi
    68 00000005 56                      push rsi                                                    ;Backup rsi
    69 00000006 52                      push rdx                                                    ;Backup rdx
    70 00000007 51                      push rcx                                                    ;Backup rcx
    71 00000008 4150                    push r8                                                     ;Backup r8
    72 0000000A 4151                    push r9                                                     ;Backup r9
    73 0000000C 4152                    push r10                                                    ;Backup r10
    74 0000000E 4153                    push r11                                                    ;Backup r11
    75 00000010 4154                    push r12                                                    ;Backup r12
    76 00000012 4155                    push r13                                                    ;Backup r13
    77 00000014 4156                    push r14                                                    ;Backup r14
    78 00000016 4157                    push r15                                                    ;Backup r15
    79 00000018 53                      push rbx                                                    ;Backup rbx
    80 00000019 9C                      pushf                                                       ;Backup rflags
    81                                  
    82 0000001A 6A00                    push qword 0 ; to have functions remain in the boundary to end in a 0 and not 8
    83                                  
    84                                  ;Executable section
    85                                  ;--------------------------------------------------------------------
    86                                  ;Block to prompt Please enter a floating radicand for square root bench marking:
    87 0000001C 6A00                    push qword 0
    88 0000001E B800000000              mov rax,0
    89 00000023 48BF-                   mov rdi,prompt_radicand
    89 00000025 [0000000000000000] 
    90 0000002D E8(00000000)            call printf
    91 00000032 58                      pop rax
    92                                  ;--------------------------------------------------------------------
    93                                  
    94                                  ;--------------------------------------------------------------------
    95                                  ;Block to get floating radicand
    96 00000033 6A00                    push qword 0
    97 00000035 B800000000              mov rax,0
    98 0000003A 48BF-                   mov rdi, float_form
    98 0000003C [4100000000000000] 
    99 00000044 4889E6                  mov rsi,rsp
   100 00000047 E8(00000000)            call scanf
   101 0000004C F2440F103C24            movsd xmm15, [rsp]
   102 00000052 58                      pop rax
   103                                  ;--------------------------------------------------------------------
   104                                  
   105                                  ;--------------------------------------------------------------------
   106                                  ;Block to compute sqrt of the radicand
   107 00000053 F2450F10F7              movsd xmm14,xmm15
   108 00000058 F2450F51FF              sqrtsd xmm15,xmm15
   109                                  ;--------------------------------------------------------------------
   110                                  
   111 0000005D 58                      pop rax
   112                                  
   113 0000005E F2410F10C7              movsd xmm0, xmm15
   114                                  ;reverse section
   115                                  ;===== Restore original values to integer registers ===================================================================
   116 00000063 9D                      popf                                                        ;Restore rflags
   117 00000064 5B                      pop rbx                                                     ;Restore rbx
   118 00000065 415F                    pop r15                                                     ;Restore r15
   119 00000067 415E                    pop r14                                                     ;Restore r14
   120 00000069 415D                    pop r13                                                     ;Restore r13
   121 0000006B 415C                    pop r12                                                     ;Restore r12
   122 0000006D 415B                    pop r11                                                     ;Restore r11
   123 0000006F 415A                    pop r10                                                     ;Restore r10
   124 00000071 4159                    pop r9                                                      ;Restore r9
   125 00000073 4158                    pop r8                                                      ;Restore r8
   126 00000075 59                      pop rcx                                                     ;Restore rcx
   127 00000076 5A                      pop rdx                                                     ;Restore rdx
   128 00000077 5E                      pop rsi                                                     ;Restore rsi
   129 00000078 5F                      pop rdi                                                     ;Restore rdi
   130 00000079 5D                      pop rbp                                                     ;Restore rbp
   131                                  
   132 0000007A C3                      ret
